#include "math.h"
#include "build_octree.h"

static void
_point_extents(const int            dim,
               const ple_lnum_t     n_points,
               const ple_lnum_t     point_index[],
               const ple_coord_t    point_coords[],
               double               extents[]); 

static void
_build_octree_leaves(const double        extents[],
                     const ple_coord_t   point_coords[],
                     ple_lnum_t         *point_ids_tmp,
                     _octree_t          *octree,
                     ple_lnum_t          point_range[2]); 

static int         _octree_max_levels = 18; // Maximum number of levels 
static ple_lnum_t  _octree_threshold  =  4; // Number of points in octree node under which the node is final


//=================================================================| OCTREE |===//
static void
_free_octree(_octree_t *octree)
{

  octree->n_points = 0;
  octree->n_nodes = 0;
  octree->n_nodes_max = 0;

  PLE_FREE(octree->nodes);
  PLE_FREE(octree->point_ids);
}


 _octree_t
build_octree(ple_lnum_t         n_points,
              const ple_coord_t  point_coords[])
{
  size_t i;
  ple_lnum_t point_range[2];
  _octree_t _octree;

  int *point_ids_tmp = NULL;

  /* Initialization */

  point_range[0] = 0;
  point_range[1] = n_points;

  _octree.n_points = n_points;
  _octree.n_nodes = 0;
  _octree.n_nodes_max = 0;
  _octree.nodes = NULL;
  _octree.point_ids = NULL;

  if (n_points > 0) {

    _point_extents(3,
                   n_points,
                   NULL,
                   point_coords,
                   _octree.extents);

    PLE_MALLOC(_octree.point_ids, _octree.n_points, ple_lnum_t);

    for (i = 0; i < _octree.n_points; i++)
      _octree.point_ids[i] = i;

    PLE_MALLOC(point_ids_tmp, n_points, int);

    _build_octree_leaves(_octree.extents,
                         point_coords,
                         point_ids_tmp,
                         &_octree,
                         point_range);

    PLE_FREE(point_ids_tmp);

  }

  return _octree;
}


static void
_build_octree_leaves(const double        extents[],
                     const ple_coord_t   point_coords[],
                     ple_lnum_t         *point_ids_tmp,
                     _octree_t          *octree,
                     ple_lnum_t          point_range[2])
{
  ple_lnum_t i, j, k, _n_nodes, _n_points, tmp_size;

  ple_lnum_t count[8], idx[9], octant_id[8];
  double mid[3], sub_extents[6];
  _octant_t  *_node;

  int octant_mask[3] = {4, 2, 1}; /* pow(2, 2), pow(2, 1), pow(2,0) */

  _n_nodes = octree->n_nodes;
  tmp_size = octree->n_nodes;

  /* Resize octree if necesary */

  if (octree->n_nodes >= octree->n_nodes_max) {
    if (octree->n_nodes == 0) {
      octree->n_nodes = 1;
      octree->n_nodes_max = 8;
    }
    octree->n_nodes_max *= 2;
    PLE_REALLOC(octree->nodes, octree->n_nodes_max, _octant_t);
  }

  /* Number of points */

  _n_points = point_range[1] - point_range[0];

  /* Extents center */

  for (j = 0; j < 3; j++)
    mid[j]= (extents[j] + extents[j + 3]) * 0.5;

  for (j = 0; j < 8; j++) {
    count[j] = 0;
    octant_id[j] = -1;
  }

  /* Count points in each octant */

  for (i = point_range[0]; i < point_range[1]; i++) {

    for (j = 0, k = 0; j < 3; j++) {
      if (point_coords[octree->point_ids[i]*3 + j] > mid[j])
        k += octant_mask[j];
    }

    count[k] += 1;
  }

  /* Build index */

  idx[0] = 0;
  for (j = 0; j < 8; j++)
    idx[j+1] = idx[j] + count[j];

  for (j = 0; j < 8; j++)
    count[j] = 0;

  for (i = point_range[0], j = 0; i < point_range[1]; i++) {

    for (j = 0, k = 0; j < 3; j++) {
      if (point_coords[octree->point_ids[i]*3 + j] > mid[j])
        k += octant_mask[j];
    }

    point_ids_tmp[idx[k] + count[k]] = octree->point_ids[i];
    count[k] += 1;
  }

  for (i = point_range[0], j = 0; i < point_range[1]; i++, j++)
    octree->point_ids[i] = point_ids_tmp[j];

  for (i = 0; i < 9; i++)
    idx[i] = point_range[0] + idx[i];

  /* Build leaves recursively */

  for (i = 0; i < 8; i++) {

    if (count[i] > _octree_threshold) {

      tmp_size++;

      octant_id[i] = tmp_size;

      if (i < 4) {
        sub_extents[0] = extents[0];
        sub_extents[3] = mid[0];
      }
      else {
        sub_extents[0] = mid[0];
        sub_extents[3] = extents[3];
      }
      /* 1.0e-12 term in assert() used to allow for
         truncation error in for xmin = xmax case */
      assert(sub_extents[0] < sub_extents[3] + 1.0e-12);

      if (i%4 < 2) {
        sub_extents[1] = extents[1];
        sub_extents[4] = mid[1];
      }
      else {
        sub_extents[1] = mid[1];
        sub_extents[4] = extents[4];
      }
      assert(sub_extents[1] < sub_extents[4] + 1.0e-12);

      if (i%2 < 1) {
        sub_extents[2] = extents[2];
        sub_extents[5] = mid[2];
      }
      else {
        sub_extents[2] = mid[2];
        sub_extents[5] = extents[5];
      }
      assert(sub_extents[2] < sub_extents[5] + 1.0e-12);

      octree->n_nodes = tmp_size;

      _build_octree_leaves(sub_extents,
                           point_coords,
                           point_ids_tmp,
                           octree,
                           idx + i);

      tmp_size = octree->n_nodes;
    }

  }

  /* Finalize node */

  _node = octree->nodes + _n_nodes;

  for (i = 0; i < 9; i++)
    _node->idx[i] = idx[i];

  for (i = 0; i < 8; i++)
    _node->octant_id[i] = octant_id[i];

  _node->n_points = _n_points;
}



static void
_point_extents(const int            dim,
               const ple_lnum_t     n_points,
               const ple_lnum_t     point_index[],
               const ple_coord_t    point_coords[],
               double               extents[])
{
  int i;
  ple_lnum_t j, coord_idx;

  /* initialize extents in case mesh is empty or dim < 3 */
  for (i = 0; i < dim; i++) {
    extents[i]       =  HUGE_VAL;
    extents[i + dim] = -HUGE_VAL;
  }

  /* Compute extents */

  if (point_index != NULL) {

    for (j = 0; j < n_points; j++) {
      coord_idx = point_index[j] - 1;
      for (i = 0; i < dim; i++) {
        if (extents[i]       > point_coords[(coord_idx * dim) + i])
          extents[i]       = point_coords[(coord_idx * dim) + i];
        if (extents[i + dim] < point_coords[(coord_idx * dim) + i])
          extents[i + dim] = point_coords[(coord_idx * dim) + i];
      }
    }
  }

  else {

    for (coord_idx = 0; coord_idx < n_points; coord_idx++) {
      for (i = 0; i < dim; i++) {
        if (extents[i]       > point_coords[(coord_idx * dim) + i])
          extents[i]       = point_coords[(coord_idx * dim) + i];
        if (extents[i + dim] < point_coords[(coord_idx * dim) + i])
          extents[i + dim] = point_coords[(coord_idx * dim) + i];
      }
    }
  }

}


//=================================================================| MESH |===//
static double      _epsilon_denom = 1.e-28; /* Minimum denominator */

enum {X, Y, Z};

#define _DOT_PRODUCT(vect1, vect2) \
  (vect1[X] * vect2[X] + vect1[Y] * vect2[Y] + vect1[Z] * vect2[Z])

#define _CROSS_PRODUCT(prod_vect, vect1, vect2)  \
  (prod_vect[X] = vect1[Y] * vect2[Z] - vect2[Y] * vect1[Z], \
   prod_vect[Y] = vect2[X] * vect1[Z] - vect1[X] * vect2[Z], \
   prod_vect[Z] = vect1[X] * vect2[Y] - vect2[X] * vect1[Y])

#define _DOT_PRODUCT_2D(vect1, vect2) \
  (vect1[X] * vect2[X] + vect1[Y] * vect2[Y])


static void
_locate_on_triangle_3d(ple_lnum_t           elt_num,
                       const ple_lnum_t     element_vertex_num[],
                       const ple_coord_t    vertex_coords[],
                       const ple_coord_t    point_coords[],
                       ple_lnum_t           n_points_in_extents,
                       const ple_lnum_t     points_in_extents[],
                       const double         tolerance,
                       ple_lnum_t           location[],
                       float                distance[])
{
  ple_lnum_t  i, j, k, coord_idx_0, coord_idx_1, coord_idx_2;

  double t[3], u[3], v[3], w[3], vect_tmp[3];
  double uu, vv, uv, ut, vt, ww, det, tmp_max;
  double epsilon2, dist2, vertex_dist2, isop_0, isop_1;

  double tolerance2 = tolerance*tolerance;

  /* vertex index of the triangle studied */

  coord_idx_0 = element_vertex_num[0] - 1;
  coord_idx_1 = element_vertex_num[1] - 1;
  coord_idx_2 = element_vertex_num[2] - 1;

    /* Calculate triangle-constant values for barycentric coordinates */

  for (j = 0; j < 3; j++) {
    u[j] = - vertex_coords[(coord_idx_0*3) + j]
           + vertex_coords[(coord_idx_1*3) + j];
    v[j] = - vertex_coords[(coord_idx_0*3) + j]
           + vertex_coords[(coord_idx_2*3) + j];
    w[j] =   vertex_coords[(coord_idx_1*3) + j]
           - vertex_coords[(coord_idx_2*3) + j];
  }

  uu = _DOT_PRODUCT(u, u);
  vv = _DOT_PRODUCT(v, v);
  ww = _DOT_PRODUCT(w, w);
  uv = _DOT_PRODUCT(u, v);

  det = (uu*vv - uv*uv);

  /* epsilon2 is based on maximum edge length (squared) */

  tmp_max = PLE_MAX(vv, ww);

  if (tolerance < 0.)
    epsilon2 = HUGE_VAL;
  else
    epsilon2 = PLE_MAX(uu, tmp_max) * tolerance2;

  /* Loop on points resulting from extent query */

  for (k = 0; k < n_points_in_extents; k++) {

    i =  points_in_extents[k];

    vertex_dist2 = distance[i]*distance[i];

    /* Calculation of the barycenter coordinates for the projected node */

    for (j = 0; j < 3; j++)
      t[j] = - vertex_coords[(coord_idx_0*3) + j]
             + point_coords[i*3 + j];

    ut = _DOT_PRODUCT(u, t);
    vt = _DOT_PRODUCT(v, t);

    if (det >= _epsilon_denom) {
      isop_0 = (ut*vv - vt*uv) / det;
      isop_1 = (uu*vt - uv*ut) / det;
    }
    else { /* for degenerate triangles, use triangle center */
      isop_0 = 0.5;
      isop_1 = 0.5;
    }

    _CROSS_PRODUCT(vect_tmp, u, v);

    /* if the projected point is not on triangle, we project it
       on the nearest edge or node */

    if (isop_0 < 0.)
      isop_0 = 0.;

    if (isop_1 < 0.)
      isop_1 = 0.;

    if ((1.0 - isop_0 - isop_1) < 0.) {
      isop_0 = isop_0 / (isop_0 + isop_1);
      isop_1 = isop_1 / (isop_0 + isop_1);
    }

    /* re-use vect_tmp */

    for (j = 0; j < 3; j++)
      vect_tmp[j] =   vertex_coords[coord_idx_0*3 + j]
                    + u[j]*isop_0
                    + v[j]*isop_1
                    - point_coords[i*3 + j];

    /* distance between point to locate and its projection */

    dist2 = _DOT_PRODUCT(vect_tmp, vect_tmp);

    if (dist2 < epsilon2 && (dist2 < vertex_dist2 || distance[i] < 0.0)) {
      location[i] = elt_num;
      distance[i] = sqrt(dist2);
    }

  } /* End of loop on points resulting from extent query */
}

static void
_locate_in_tetra(ple_lnum_t         elt_num,
                 const ple_lnum_t   element_vertex_num[],
                 const ple_coord_t  vertex_coords[],
                 const ple_coord_t  point_coords[],
                 ple_lnum_t         n_points_in_extents,
                 const ple_lnum_t   points_in_extents[],
                 double             tolerance,
                 ple_lnum_t         location[],
                 float              distance[])
{
  double vol6;
  double dist, max_dist;
  int i, j, k;

  double isop_0, isop_1, isop_2;
  double t00, t10, t20, t01, t02, t03, t11, t12, t13, t21, t22, t23;
  double v01[3], v02[3], v03[3], shapef[4];

  ple_coord_t  tetra_coords[4][3];

  for (i = 0; i < 4; i++) {
    ple_lnum_t coord_idx = element_vertex_num[i] -1;
    for (j = 0; j < 3; j++)
      tetra_coords[i][j] = vertex_coords[(coord_idx * 3) + j];
  }

  for (i = 0; i < 3; i++) {
    v01[i] = tetra_coords[1][i] - tetra_coords[0][i];
    v02[i] = tetra_coords[2][i] - tetra_coords[0][i];
    v03[i] = tetra_coords[3][i] - tetra_coords[0][i];
  }

  vol6 = fabs(  v01[0] * (v02[1]*v03[2] - v02[2]*v03[1])
              - v02[0] * (v01[1]*v03[2] - v01[2]*v03[1])
              + v03[0] * (v01[1]*v02[2] - v01[2]*v02[1]));

  if (vol6 < _epsilon_denom)
    return;

  for (k = 0; k < n_points_in_extents; k++) {

    i = points_in_extents[k];

    t00  =   point_coords[i*3]     - tetra_coords[0][0];
    t10  =   point_coords[i*3 + 1] - tetra_coords[0][1];
    t20  =   point_coords[i*3 + 2] - tetra_coords[0][2];

    t01  = - tetra_coords[0][0] + tetra_coords[1][0];
    t02  = - tetra_coords[0][0] + tetra_coords[2][0];
    t03  = - tetra_coords[0][0] + tetra_coords[3][0];

    t11  = - tetra_coords[0][1] + tetra_coords[1][1];
    t12  = - tetra_coords[0][1] + tetra_coords[2][1];
    t13  = - tetra_coords[0][1] + tetra_coords[3][1];

    t21  = - tetra_coords[0][2] + tetra_coords[1][2];
    t22  = - tetra_coords[0][2] + tetra_coords[2][2];
    t23  = - tetra_coords[0][2] + tetra_coords[3][2];

    isop_0 = (  t00 * (t12*t23 - t13*t22)
              - t10 * (t02*t23 - t22*t03)
              + t20 * (t02*t13 - t12*t03)) / vol6;
    isop_1 = (- t00 * (t11*t23 - t13*t21)
              + t10 * (t01*t23 - t21*t03)
              - t20 * (t01*t13 - t03*t11)) / vol6;
    isop_2 = (  t00 * (t11*t22 - t21*t12)
              - t10 * (t01*t22 - t21*t02)
              + t20 * (t01*t12 - t11*t02)) / vol6;

    shapef[0] = 1. - isop_0 - isop_1 - isop_2;
    shapef[1] =      isop_0;
    shapef[2] =               isop_1;
    shapef[3] =                        isop_2;

    max_dist = -1.0;

    for (j = 0; j < 4; j++){

      dist = 2.*PLE_ABS(shapef[j] - 0.5);

      if (max_dist < dist)
        max_dist = dist;
    }

    if (   (max_dist > -0.5 && max_dist < (1. + 2.*tolerance))
        && (max_dist < distance[i] || distance[i] < 0)) {
      location[i] = elt_num;
      distance[i] = max_dist;
    }

  }
}


inline static int
_intersect_extents(int           dim,
                   const double  extents_1[],
                   const double  extents_2[])
{
  int i;
  int retval = 1;

  for (i = 0; i < dim; i++) {
    if (   (extents_1[i] > extents_2[i + dim])
        || (extents_2[i] > extents_1[i + dim])) {
      retval = 0;
      break;
    }
  }

  return retval;
}


inline static bool
_within_extents(int                dim,
                const ple_coord_t  coords[],
                const double       extents[])
{
  int i;
  bool retval = true;

  for (i = 0; i < dim; i++) {
    if (   (coords[i] < extents[i])
        || (coords[i] > extents[i + dim])) {
      retval = false;
      break;
    }
  }

  return retval;
}


static void
_query_octree_node(const double        extents[],
                   const ple_coord_t   point_coords[],
                   const _octree_t    *octree,
                   const double        node_extents[],
                   int                 node_id,
                   ple_lnum_t         *loc_point_ids,
                   ple_lnum_t         *n_loc_points)
{
  _octant_t *node;
  int i, j, k;
  int dim = 3;
  double sub_extents[6], mid[3];

  node = octree->nodes + node_id;

  if (_intersect_extents(dim, node_extents, extents)) {

    for (j = 0; j < dim; j++)
      mid[j]= (node_extents[j] + node_extents[j + dim]) * 0.5;

    /* Loop on node leaves */

    for (i = 0; i < 8; i++) {

      /* Compute octant extents */

      if (i < 4) {
        sub_extents[0] = node_extents[0];
        sub_extents[3] = mid[0];
      }
      else {
        sub_extents[0] = mid[0];
        sub_extents[3] = node_extents[3];
      }

      if (i%4 < 2) {
        sub_extents[1] = node_extents[1];
        sub_extents[4] = mid[1];
      }
      else {
        sub_extents[1] = mid[1];
        sub_extents[4] = node_extents[4];
      }
      if (i%2 < 1) {
        sub_extents[2] = node_extents[2];
        sub_extents[5] = mid[2];
      }
      else {
        sub_extents[2] = mid[2];
        sub_extents[5] = node_extents[5];
      }

      /* Search recursively if octant is not final */

      if (node->octant_id[i] > -1)
        _query_octree_node(extents,
                           point_coords,
                           octree,
                           sub_extents,
                           node->octant_id[i],
                           loc_point_ids,
                           n_loc_points);

      else {

        /* Update list of points located */

        if (_intersect_extents(dim, sub_extents, extents)) {

          for (k = node->idx[i]; k < node->idx[i+1]; k++) {

            ple_lnum_t point_id = octree->point_ids[k];

            if (_within_extents(dim, point_coords + point_id*dim, extents)) {
              loc_point_ids[*n_loc_points] = point_id;
              (*n_loc_points)++;
            }

          }
        }

      }

    } /* End of loop on node leaves */

  }
}


static void
_query_octree(const double        extents[],
              const ple_coord_t   point_coords[],
              const _octree_t    *octree,
              ple_lnum_t         *n_loc_points,
              ple_lnum_t          loc_point_ids[])
{
  *n_loc_points = 0;

  if (octree->n_points > 0)
    _query_octree_node(extents,
                       point_coords,
                       octree,
                       octree->extents,
                       0,
                       loc_point_ids,
                       n_loc_points);
}


inline static void
_elt_extents_finalize(int               dim,
                      int               elt_dim,
                      double            tolerance,
                      double           *elt_extents)
{
  int i;
  double delta[3];

  for (i = 0; i < dim; i++)
    delta[i] = (elt_extents[i+dim] - elt_extents[i]) * tolerance;

  if (elt_dim < dim) {
    double delta_max = delta[0];  /* for 1d or 2d elements, ensure */
    for (i = 0; i < dim; i++) {   /* search extent "thickness" */
      if (delta[i] > delta_max)
        delta_max = delta[i];
    }
    for (i = 0; i < dim; i++)
      delta[i] = delta_max;
  }

  for (i = 0; i < dim; i++) {
    elt_extents[i]     = elt_extents[i]     - delta[i];
    elt_extents[i+dim] = elt_extents[i+dim] + delta[i];
  }
}


inline static void
_update_elt_extents(int                 dim,
                    ple_lnum_t          vertex_id,
                    const ple_coord_t   vertex_coords[],
                    double              elt_extents[],
                    int                *elt_initialized)
{
  ple_lnum_t  i;
  ple_lnum_t coord_idx = vertex_id;

//printf("--| %d \n", vertex_id); // __my_change__ 

  if (*elt_initialized == 0) 
  {
  
    for (i = 0; i < dim; i++) 
    {
      elt_extents[i]       = vertex_coords[(coord_idx * dim) + i];
      elt_extents[i + dim] = vertex_coords[(coord_idx * dim) + i];
    }
   
    *elt_initialized = 1;

  }
  else 
  {
    for (i = 0; i < dim; i++) 
    {
      if (elt_extents[i]       > vertex_coords[(coord_idx * dim) + i])
        elt_extents[i]       = vertex_coords[(coord_idx * dim) + i];
      if (elt_extents[i + dim] < vertex_coords[(coord_idx * dim) + i])
        elt_extents[i + dim] = vertex_coords[(coord_idx * dim) + i];
    }

  }

}



static void
_mesh_locate_3d(const syr_cfd_mesh_t  *mesh,
                double                 tolerance,
                const ple_coord_t      point_coords[],
                _octree_t             *octree,
                ple_lnum_t             points_in_extents[],
                ple_lnum_t             location[],
                float                  distance[])
{
  ple_lnum_t  i, j;
  double elt_extents[6];

  ple_lnum_t n_points_in_extents = 0;

  const int stride = syr_cfd_mesh_n_vertices_element[mesh->element_type];
  const int elt_dim = stride - 1; /* true for simplexes */

  if (mesh->n_elements == 0)
    return;

  for (i = 0; i < mesh->n_elements; i++) {

    int elt_initialized = 0;

    for (j = 0; j < stride; j++) {
      ple_lnum_t vertex_id = mesh->vertex_num[i*stride + j] - 1;
      _update_elt_extents(3,
                          vertex_id,
                          mesh->vertex_coords,
                          elt_extents,
                          &elt_initialized);
    }
    _elt_extents_finalize(3,
                          elt_dim,
                          tolerance,
                          elt_extents);

    _query_octree(elt_extents,
                  point_coords,
                  octree,
                  &n_points_in_extents,
                  points_in_extents);

    if (mesh->element_type == SYR_CFD_TETRA)
      _locate_in_tetra(i + 1,
                       mesh->vertex_num + i*stride,
                       mesh->vertex_coords,
                       point_coords,
                       n_points_in_extents,
                       points_in_extents,
                       tolerance,
                       location,
                       distance);

    else if (mesh->element_type == SYR_CFD_TRIA)
      _locate_on_triangle_3d(i + 1,
                             mesh->vertex_num + i*stride,
                             mesh->vertex_coords,
                             point_coords,
                             n_points_in_extents,
                             points_in_extents,
                             tolerance,
                             location,
                             distance);
  }
}



inline static void
_update_extents(int               dim,
                double           *sub_extents,
                double           *extents)
{
  int i;

  for (i = 0; i < dim; i++) {
    if (sub_extents[i] < extents[i])
      extents[i] = sub_extents[i];
    if (sub_extents[i+dim] > extents[i+dim])
      extents[i+dim] = sub_extents[i+dim];
  }
}


/*
void
fvm_nodal_extents(const fvm_nodal_t  *this_nodal,
                  double              tolerance,
                  double              extents[])
{
}
*/

static void
_mesh_closest_3d(const syr_cfd_mesh_t  *mesh,
                 const ple_coord_t      point_coords[],
                 ple_lnum_t             n_point_ids,
                 const ple_lnum_t       point_ids[],
                 ple_lnum_t             location[],
                 float                  distance[])
{
  ple_lnum_t  i;

  const int stride = syr_cfd_mesh_n_vertices_element[mesh->element_type];

  if (mesh->n_elements == 0)
    return;

  if (mesh->element_type == SYR_CFD_TETRA)
  {
    printf("ERROR: \"Locating volume elements closest to points not handled yet\"!\n\n"); 
    exit(1); 
    
/*
    ple_error(__FILE__, __LINE__, 0,
              _("Locating volume elements closest to points not handled yet"));
*/
  }
  else if (mesh->element_type == SYR_CFD_TRIA) {

    for (i = 0; i < mesh->n_elements; i++)
      _locate_on_triangle_3d(i + 1,
                             mesh->vertex_num + i*stride,
                             mesh->vertex_coords,
                             point_coords,
                             n_point_ids,
                             point_ids,
                             (HUGE_VAL / 4.),
                             location,
                             distance);

  }
}


static void
_locate_on_edge_2d(ple_lnum_t           elt_num,
                   const ple_lnum_t     element_vertex_num[],
                   const ple_coord_t    vertex_coords[],
                   const ple_coord_t    point_coords[],
                   ple_lnum_t           n_points_in_extents,
                   const ple_lnum_t     points_in_extents[],
                   double               tolerance,
                   ple_lnum_t           location[],
                   float                distance[])
{
  ple_lnum_t  i, j, k, coord_idx_0, coord_idx_1;

  double u[2], v[2];
  double uv, len2, isop_0;
  double dist2, epsilon2, vertex_dist2;

  /* vertex index of the edge studied */

  coord_idx_0 = element_vertex_num[0] - 1;
  coord_idx_1 = element_vertex_num[1] - 1;

  /* Calculate edge vector and length */

  for (j = 0; j < 2; j++)
    u[j] =   vertex_coords[(coord_idx_1*2) + j]
           - vertex_coords[(coord_idx_0*2) + j];

  len2 = _DOT_PRODUCT_2D(u, u);

  if (tolerance < 0.0)
    epsilon2 = HUGE_VAL;

  else
    epsilon2 = len2*tolerance*tolerance;

  /* Loop on points resulting from extent query */

  for (k = 0; k < n_points_in_extents; k++) {

    i =  points_in_extents[k];

    vertex_dist2 = distance[i]*distance[i];

    /* Calculate linear coordinates of projection of point on edge axis */

    for (j = 0; j < 2; j++)
      v[j] = point_coords[i*2 + j] - vertex_coords[(coord_idx_0*2) + j];

    uv = u[0]*v[0] + u[1]*v[1];

    if (len2 >= _epsilon_denom)
      isop_0 = uv / len2;
    else
      isop_0 = 0.5; /* for degenerate edges, use center */

    /* Set v to be the vector from the point to the closest point on
       the segment (if isop_0 < 0, v is already that vector) */

    if (isop_0 >= 1) {
      for (j = 0; j < 2; j++)
        v[j] = point_coords[i*2 + j] - vertex_coords[(coord_idx_1*2) + j];
    }
    else if (isop_0 > 0) {
      for (j = 0; j < 2; j++)
        v[j] -= isop_0*u[j];
    }

    /* Distance between point to locate and its projection */

    dist2 = _DOT_PRODUCT_2D(v, v);

    if (dist2 < epsilon2 && (dist2 < vertex_dist2 || distance[i] < 0.0)) {
      location[i] = elt_num;
      distance[i] = sqrt(dist2);
    }

  } /* End of loop on points resulting from extent query */

}

static void
_mesh_closest_2d(const syr_cfd_mesh_t  *mesh,
                 const ple_coord_t      point_coords[],
                 ple_lnum_t             n_point_ids,
                 const ple_lnum_t       point_id[],
                 ple_lnum_t             location[],
                 float                  distance[])
{
  ple_lnum_t  i;

  const int stride = syr_cfd_mesh_n_vertices_element[mesh->element_type];

  /* Return immediately if nothing to do for this rank */

  if (mesh->n_elements == 0 || mesh->element_type != SYR_CFD_EDGE)
    return;

  /* Main loop on elements */

  for (i = 0; i < mesh->n_elements; i++) {

    /* Locate on edge */

    _locate_on_edge_2d(i + 1,
                       mesh->vertex_num + i*stride,
                       mesh->vertex_coords,
                       point_coords,
                       n_point_ids,
                       point_id,
                       -1.0,
                       location,
                       distance);

  } /* End of loop on elements */
}




//============================================================================//
//
//  const syr_cfd_mesh_t  *m = (syr_cfd_mesh_t*)mesh;
//
void
syr_cfd_point_location_contain(const void         *mesh,
                               double              tolerance,
                               ple_lnum_t          n_points,
                               const ple_coord_t   point_coords[],
                               ple_lnum_t          location[],
                               float               distance[])
{
  if (mesh == NULL)
    return;

  else {

    ple_lnum_t  *points_in_extents = NULL;

    //const syr_cfd_mesh_t  *m = mesh;
    const syr_cfd_mesh_t  *m = (syr_cfd_mesh_t*)mesh;

    /* Build point query list
       (max size: n_points, usually much less) */

    PLE_MALLOC(points_in_extents, n_points, ple_lnum_t);

    /* Use octree for 3d point location */

    if (m->dim == 3) {

      _octree_t  octree = build_octree(n_points, point_coords);

      /* Locate for all sections */

      _mesh_locate_3d(m,
                      tolerance,
                      point_coords,
                      &octree,
                      points_in_extents,
                      location,
                      distance);

      _free_octree(&octree);
    }

    /* Use quadtree for 2d point location */

    else if (m->dim == 2) {
    
printf("ERROR: dim==2!\n\n"); 
exit(1); 

      /*
      _quadtree_t  quadtree = _build_quadtree(n_points, point_coords);

      _mesh_locate_2d(m,
                      tolerance,
                      point_coords,
                      &quadtree,
                      points_in_extents,
                      location,
                      distance);

      _free_quadtree(&quadtree);
      */
    }

    PLE_FREE(points_in_extents);
  }
}


ple_lnum_t
syr_cfd_point_location_extents(const void  *mesh,
                               ple_lnum_t   n_max_extents,
                               double       tolerance,
                               double       extents[])
{
//  const syr_cfd_mesh_t  *m = mesh;
  const syr_cfd_mesh_t  *m = (syr_cfd_mesh_t*)mesh;
  ple_lnum_t retval = 0;

  if (m == NULL)
    return 0;

  /* In query mode, return maximum extents available */

  if (n_max_extents < 0)
    retval = m->n_elements;

  /* If n_max_extents < n_elements, we return global mesh extents */

  else if (n_max_extents > 0 && n_max_extents < m->n_elements) {

    int i;
    ple_lnum_t j, k, vertex_id;
    double elt_extents[6];

    int dim = m->dim;
    int stride = syr_cfd_mesh_n_vertices_element[m->element_type];
    int elt_dim = stride - 1; /* True for simplexes */
/*
printf("|_[a01.00] \n");
printf("|_[a01.00] n_elements:%d\n", m->n_elements);
printf("|_[a01.00] dim: %d\n", dim);
printf("|_[a01.00] stride: %d\n", stride);
*/

    /* initialize extents in case mesh is empty or dim < 3 */
    for (i = 0; i < dim; i++) {
      extents[i]       =  HUGE_VAL;
      extents[i + dim] = -HUGE_VAL;
    }

    /* Compute extents */

    for (j = 0; j < m->n_elements; j++) {

      int elt_initialized = 0;

//printf("[%d] ", j+1);
      for (k = 0; k < stride; k++) {

        vertex_id = m->vertex_num[j*stride + k] - 1;
//printf("%d ", vertex_id+1);

        _update_elt_extents(dim,
                            vertex_id,
                            m->vertex_coords,
                            elt_extents,
                            &elt_initialized);

      }
//printf("\n");

      _elt_extents_finalize(dim,
                            elt_dim,
                            tolerance,
                            elt_extents);
      _update_extents(dim, elt_extents, extents);
    }

    retval = 1;
  }

  /* If n_max_extents = n_elements, we return element extents */

  else if (n_max_extents == m->n_elements) {

    ple_lnum_t j, k, vertex_id;

    int dim = m->dim;
    int stride = syr_cfd_mesh_n_vertices_element[m->element_type];
    int elt_dim = stride - 1; /* True for simplexes */

    /* Compute extents */

    for (j = 0; j < m->n_elements; j++) {

      double *elt_extents = extents + dim*2*j;
      int elt_initialized = 0;

      for (k = 0; k < stride; k++) {

        vertex_id = m->vertex_num[j*stride + k] - 1;

        _update_elt_extents(dim,
                            vertex_id,
                            m->vertex_coords,
                            elt_extents,
                            &elt_initialized);

      }

      _elt_extents_finalize(dim,
                            elt_dim,
                            tolerance,
                            elt_extents);
    }

    retval = n_max_extents;
  }

  return retval;
}



void
syr_cfd_point_location_closest(const void         *mesh,
                               ple_lnum_t          n_points,
                               const ple_coord_t   point_coords[],
                               ple_lnum_t          location[],
                               float               distance[])
{
  if (mesh == NULL)
    return;

  else {

    ple_lnum_t j;
    ple_lnum_t  *point_ids = NULL;

//    const syr_cfd_mesh_t  *m = mesh;
    const syr_cfd_mesh_t  *m = (syr_cfd_mesh_t*)mesh;


    PLE_MALLOC(point_ids, n_points, ple_lnum_t);
    for (j = 0; j < n_points; j++)
      point_ids[j] = j;

    /* Use brute force for closest 3d point location */

    if (m->dim == 3)
      _mesh_closest_3d(m,
                       point_coords,
                       n_points,
                       point_ids,
                       location,
                       distance);

    /* Use brute force for closest 2d point location */

    else if (m->dim == 2)
      _mesh_closest_2d(m,
                       point_coords,
                       n_points,
                       point_ids,
                       location,
                       distance);

    if (point_ids != NULL)
      PLE_FREE(point_ids);
  }
}

//#ifdef SATURNE==1
//#include "cs_alya.c"
//#endif 

//=======================================================================||===//
//=======================================================================||===//

